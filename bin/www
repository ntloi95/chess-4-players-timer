#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("chess-4-player-timer:server");
var http = require("http");
const WebSocket = require("ws");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}

const wss = new WebSocket.Server({ server });

var currentPlayer = 0;
var currentPlayerIndex = 0;
var listPlayers = [0, 1, 2, 3];
wss.on("connection", function (ws) {
    ws.on("message", function (message) {
        const data = JSON.parse(message);
        let userId = data.userId;
        if (userId == currentPlayer) {
            switch (data.type) {
                case "nexting": {
                    wss.clients.forEach(function each(client) {
                        if (client.readyState === WebSocket.OPEN) {
                            client.send(
                                JSON.stringify({
                                    type: "nexted",
                                })
                            );
                        }
                    });

                    currentPlayerIndex += 1;
                    currentPlayerIndex %= listPlayers.length;
                    break;
                }
                case "checkmating": {
                    wss.clients.forEach(function each(client) {
                        if (client.readyState === WebSocket.OPEN) {
                            listPlayers = listPlayers.filter(function (i) {
                                return userId != i;
                            });
                            client.send(
                                JSON.stringify({
                                    type: "checkmated",
                                    playerId: userId,
                                })
                            );
                        }
                    });
                    if (currentPlayerIndex == listPlayers.length) {
                        currentPlayerIndex = 0;
                    }
                    break;
                }
            }
            currentPlayer = listPlayers[currentPlayerIndex];
        }
    });

    ws.on("close", function () {
        console.log("stopping client interval");
    });
});

module.exports.currentPlayer = () => {
    return currentPlayer;
};
